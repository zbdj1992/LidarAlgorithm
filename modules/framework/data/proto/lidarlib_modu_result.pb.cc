// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidarlib_modu_result.proto

#include "lidarlib_modu_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AABB3Ds_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Clusters_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OBB3Ds_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PointCloud_geometry_2eproto;
namespace lidar_algorithm {
namespace framework {
namespace data {
namespace proto {
class LidarLibDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarLibData> _instance;
} _LidarLibData_default_instance_;
}  // namespace proto
}  // namespace data
}  // namespace framework
}  // namespace lidar_algorithm
static void InitDefaultsLidarLibData_lidarlib_5fmodu_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_;
    new (ptr) ::lidar_algorithm::framework::data::proto::LidarLibData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_algorithm::framework::data::proto::LidarLibData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LidarLibData_lidarlib_5fmodu_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLidarLibData_lidarlib_5fmodu_5fresult_2eproto}, {
      &scc_info_AABB3Ds_geometry_2eproto.base,
      &scc_info_OBB3Ds_geometry_2eproto.base,
      &scc_info_Clusters_geometry_2eproto.base,
      &scc_info_PointCloud_geometry_2eproto.base,}};

void InitDefaults_lidarlib_5fmodu_5fresult_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LidarLibData_lidarlib_5fmodu_5fresult_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lidarlib_5fmodu_5fresult_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_lidarlib_5fmodu_5fresult_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lidarlib_5fmodu_5fresult_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lidarlib_5fmodu_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, aabb3ds_),
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, obb3ds_),
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, clusters_),
  PROTOBUF_FIELD_OFFSET(::lidar_algorithm::framework::data::proto::LidarLibData, point_cloud_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lidar_algorithm::framework::data::proto::LidarLibData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lidarlib_5fmodu_5fresult_2eproto = {
  {}, AddDescriptors_lidarlib_5fmodu_5fresult_2eproto, "lidarlib_modu_result.proto", schemas,
  file_default_instances, TableStruct_lidarlib_5fmodu_5fresult_2eproto::offsets,
  file_level_metadata_lidarlib_5fmodu_5fresult_2eproto, 1, file_level_enum_descriptors_lidarlib_5fmodu_5fresult_2eproto, file_level_service_descriptors_lidarlib_5fmodu_5fresult_2eproto,
};

const char descriptor_table_protodef_lidarlib_5fmodu_5fresult_2eproto[] =
  "\n\032lidarlib_modu_result.proto\022$lidar_algo"
  "rithm.framework.data.proto\032\016geometry.pro"
  "to\"\210\002\n\014LidarLibData\022\021\n\ttimestamp\030\001 \001(\003\0226"
  "\n\007aabb3ds\030\002 \001(\0132%.lidar_algorithm.common"
  ".proto.AABB3Ds\0224\n\006obb3ds\030\003 \001(\0132$.lidar_a"
  "lgorithm.common.proto.OBB3Ds\0228\n\010clusters"
  "\030\004 \001(\0132&.lidar_algorithm.common.proto.Cl"
  "usters\022=\n\013point_cloud\030\005 \001(\0132(.lidar_algo"
  "rithm.common.proto.PointCloudb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lidarlib_5fmodu_5fresult_2eproto = {
  false, InitDefaults_lidarlib_5fmodu_5fresult_2eproto, 
  descriptor_table_protodef_lidarlib_5fmodu_5fresult_2eproto,
  "lidarlib_modu_result.proto", &assign_descriptors_table_lidarlib_5fmodu_5fresult_2eproto, 357,
};

void AddDescriptors_lidarlib_5fmodu_5fresult_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_geometry_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lidarlib_5fmodu_5fresult_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lidarlib_5fmodu_5fresult_2eproto = []() { AddDescriptors_lidarlib_5fmodu_5fresult_2eproto(); return true; }();
namespace lidar_algorithm {
namespace framework {
namespace data {
namespace proto {

// ===================================================================

void LidarLibData::InitAsDefaultInstance() {
  ::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_._instance.get_mutable()->aabb3ds_ = const_cast< ::lidar_algorithm::common::proto::AABB3Ds*>(
      ::lidar_algorithm::common::proto::AABB3Ds::internal_default_instance());
  ::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_._instance.get_mutable()->obb3ds_ = const_cast< ::lidar_algorithm::common::proto::OBB3Ds*>(
      ::lidar_algorithm::common::proto::OBB3Ds::internal_default_instance());
  ::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_._instance.get_mutable()->clusters_ = const_cast< ::lidar_algorithm::common::proto::Clusters*>(
      ::lidar_algorithm::common::proto::Clusters::internal_default_instance());
  ::lidar_algorithm::framework::data::proto::_LidarLibData_default_instance_._instance.get_mutable()->point_cloud_ = const_cast< ::lidar_algorithm::common::proto::PointCloud*>(
      ::lidar_algorithm::common::proto::PointCloud::internal_default_instance());
}
class LidarLibData::HasBitSetters {
 public:
  static const ::lidar_algorithm::common::proto::AABB3Ds& aabb3ds(const LidarLibData* msg);
  static const ::lidar_algorithm::common::proto::OBB3Ds& obb3ds(const LidarLibData* msg);
  static const ::lidar_algorithm::common::proto::Clusters& clusters(const LidarLibData* msg);
  static const ::lidar_algorithm::common::proto::PointCloud& point_cloud(const LidarLibData* msg);
};

const ::lidar_algorithm::common::proto::AABB3Ds&
LidarLibData::HasBitSetters::aabb3ds(const LidarLibData* msg) {
  return *msg->aabb3ds_;
}
const ::lidar_algorithm::common::proto::OBB3Ds&
LidarLibData::HasBitSetters::obb3ds(const LidarLibData* msg) {
  return *msg->obb3ds_;
}
const ::lidar_algorithm::common::proto::Clusters&
LidarLibData::HasBitSetters::clusters(const LidarLibData* msg) {
  return *msg->clusters_;
}
const ::lidar_algorithm::common::proto::PointCloud&
LidarLibData::HasBitSetters::point_cloud(const LidarLibData* msg) {
  return *msg->point_cloud_;
}
void LidarLibData::clear_aabb3ds() {
  if (GetArenaNoVirtual() == nullptr && aabb3ds_ != nullptr) {
    delete aabb3ds_;
  }
  aabb3ds_ = nullptr;
}
void LidarLibData::clear_obb3ds() {
  if (GetArenaNoVirtual() == nullptr && obb3ds_ != nullptr) {
    delete obb3ds_;
  }
  obb3ds_ = nullptr;
}
void LidarLibData::clear_clusters() {
  if (GetArenaNoVirtual() == nullptr && clusters_ != nullptr) {
    delete clusters_;
  }
  clusters_ = nullptr;
}
void LidarLibData::clear_point_cloud() {
  if (GetArenaNoVirtual() == nullptr && point_cloud_ != nullptr) {
    delete point_cloud_;
  }
  point_cloud_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarLibData::kTimestampFieldNumber;
const int LidarLibData::kAabb3DsFieldNumber;
const int LidarLibData::kObb3DsFieldNumber;
const int LidarLibData::kClustersFieldNumber;
const int LidarLibData::kPointCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarLibData::LidarLibData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_algorithm.framework.data.proto.LidarLibData)
}
LidarLibData::LidarLibData(const LidarLibData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_aabb3ds()) {
    aabb3ds_ = new ::lidar_algorithm::common::proto::AABB3Ds(*from.aabb3ds_);
  } else {
    aabb3ds_ = nullptr;
  }
  if (from.has_obb3ds()) {
    obb3ds_ = new ::lidar_algorithm::common::proto::OBB3Ds(*from.obb3ds_);
  } else {
    obb3ds_ = nullptr;
  }
  if (from.has_clusters()) {
    clusters_ = new ::lidar_algorithm::common::proto::Clusters(*from.clusters_);
  } else {
    clusters_ = nullptr;
  }
  if (from.has_point_cloud()) {
    point_cloud_ = new ::lidar_algorithm::common::proto::PointCloud(*from.point_cloud_);
  } else {
    point_cloud_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:lidar_algorithm.framework.data.proto.LidarLibData)
}

void LidarLibData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LidarLibData_lidarlib_5fmodu_5fresult_2eproto.base);
  ::memset(&aabb3ds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&aabb3ds_)) + sizeof(timestamp_));
}

LidarLibData::~LidarLibData() {
  // @@protoc_insertion_point(destructor:lidar_algorithm.framework.data.proto.LidarLibData)
  SharedDtor();
}

void LidarLibData::SharedDtor() {
  if (this != internal_default_instance()) delete aabb3ds_;
  if (this != internal_default_instance()) delete obb3ds_;
  if (this != internal_default_instance()) delete clusters_;
  if (this != internal_default_instance()) delete point_cloud_;
}

void LidarLibData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarLibData& LidarLibData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LidarLibData_lidarlib_5fmodu_5fresult_2eproto.base);
  return *internal_default_instance();
}


void LidarLibData::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_algorithm.framework.data.proto.LidarLibData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && aabb3ds_ != nullptr) {
    delete aabb3ds_;
  }
  aabb3ds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obb3ds_ != nullptr) {
    delete obb3ds_;
  }
  obb3ds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clusters_ != nullptr) {
    delete clusters_;
  }
  clusters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_cloud_ != nullptr) {
    delete point_cloud_;
  }
  point_cloud_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarLibData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LidarLibData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lidar_algorithm::common::proto::AABB3Ds::_InternalParse;
        object = msg->mutable_aabb3ds();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lidar_algorithm::common::proto::OBB3Ds::_InternalParse;
        object = msg->mutable_obb3ds();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .lidar_algorithm.common.proto.Clusters clusters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lidar_algorithm::common::proto::Clusters::_InternalParse;
        object = msg->mutable_clusters();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lidar_algorithm::common::proto::PointCloud::_InternalParse;
        object = msg->mutable_point_cloud();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarLibData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_algorithm.framework.data.proto.LidarLibData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aabb3ds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obb3ds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lidar_algorithm.common.proto.Clusters clusters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_algorithm.framework.data.proto.LidarLibData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_algorithm.framework.data.proto.LidarLibData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarLibData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_algorithm.framework.data.proto.LidarLibData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
  if (this->has_aabb3ds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::aabb3ds(this), output);
  }

  // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
  if (this->has_obb3ds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::obb3ds(this), output);
  }

  // .lidar_algorithm.common.proto.Clusters clusters = 4;
  if (this->has_clusters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::clusters(this), output);
  }

  // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
  if (this->has_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::point_cloud(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_algorithm.framework.data.proto.LidarLibData)
}

::google::protobuf::uint8* LidarLibData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lidar_algorithm.framework.data.proto.LidarLibData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
  if (this->has_aabb3ds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::aabb3ds(this), target);
  }

  // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
  if (this->has_obb3ds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::obb3ds(this), target);
  }

  // .lidar_algorithm.common.proto.Clusters clusters = 4;
  if (this->has_clusters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::clusters(this), target);
  }

  // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
  if (this->has_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::point_cloud(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_algorithm.framework.data.proto.LidarLibData)
  return target;
}

size_t LidarLibData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_algorithm.framework.data.proto.LidarLibData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
  if (this->has_aabb3ds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *aabb3ds_);
  }

  // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
  if (this->has_obb3ds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obb3ds_);
  }

  // .lidar_algorithm.common.proto.Clusters clusters = 4;
  if (this->has_clusters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clusters_);
  }

  // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
  if (this->has_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_cloud_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarLibData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_algorithm.framework.data.proto.LidarLibData)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarLibData* source =
      ::google::protobuf::DynamicCastToGenerated<LidarLibData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_algorithm.framework.data.proto.LidarLibData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_algorithm.framework.data.proto.LidarLibData)
    MergeFrom(*source);
  }
}

void LidarLibData::MergeFrom(const LidarLibData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_algorithm.framework.data.proto.LidarLibData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aabb3ds()) {
    mutable_aabb3ds()->::lidar_algorithm::common::proto::AABB3Ds::MergeFrom(from.aabb3ds());
  }
  if (from.has_obb3ds()) {
    mutable_obb3ds()->::lidar_algorithm::common::proto::OBB3Ds::MergeFrom(from.obb3ds());
  }
  if (from.has_clusters()) {
    mutable_clusters()->::lidar_algorithm::common::proto::Clusters::MergeFrom(from.clusters());
  }
  if (from.has_point_cloud()) {
    mutable_point_cloud()->::lidar_algorithm::common::proto::PointCloud::MergeFrom(from.point_cloud());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LidarLibData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_algorithm.framework.data.proto.LidarLibData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarLibData::CopyFrom(const LidarLibData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_algorithm.framework.data.proto.LidarLibData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarLibData::IsInitialized() const {
  return true;
}

void LidarLibData::Swap(LidarLibData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarLibData::InternalSwap(LidarLibData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aabb3ds_, other->aabb3ds_);
  swap(obb3ds_, other->obb3ds_);
  swap(clusters_, other->clusters_);
  swap(point_cloud_, other->point_cloud_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata LidarLibData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lidarlib_5fmodu_5fresult_2eproto);
  return ::file_level_metadata_lidarlib_5fmodu_5fresult_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace data
}  // namespace framework
}  // namespace lidar_algorithm
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::lidar_algorithm::framework::data::proto::LidarLibData* Arena::CreateMaybeMessage< ::lidar_algorithm::framework::data::proto::LidarLibData >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_algorithm::framework::data::proto::LidarLibData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
