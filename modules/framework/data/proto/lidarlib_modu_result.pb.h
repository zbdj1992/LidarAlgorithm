// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidarlib_modu_result.proto

#ifndef PROTOBUF_INCLUDED_lidarlib_5fmodu_5fresult_2eproto
#define PROTOBUF_INCLUDED_lidarlib_5fmodu_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidarlib_5fmodu_5fresult_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_lidarlib_5fmodu_5fresult_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_lidarlib_5fmodu_5fresult_2eproto();
namespace lidar_algorithm {
namespace framework {
namespace data {
namespace proto {
class LidarLibData;
class LidarLibDataDefaultTypeInternal;
extern LidarLibDataDefaultTypeInternal _LidarLibData_default_instance_;
}  // namespace proto
}  // namespace data
}  // namespace framework
}  // namespace lidar_algorithm
namespace google {
namespace protobuf {
template<> ::lidar_algorithm::framework::data::proto::LidarLibData* Arena::CreateMaybeMessage<::lidar_algorithm::framework::data::proto::LidarLibData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lidar_algorithm {
namespace framework {
namespace data {
namespace proto {

// ===================================================================

class LidarLibData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lidar_algorithm.framework.data.proto.LidarLibData) */ {
 public:
  LidarLibData();
  virtual ~LidarLibData();

  LidarLibData(const LidarLibData& from);

  inline LidarLibData& operator=(const LidarLibData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarLibData(LidarLibData&& from) noexcept
    : LidarLibData() {
    *this = ::std::move(from);
  }

  inline LidarLibData& operator=(LidarLibData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LidarLibData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarLibData* internal_default_instance() {
    return reinterpret_cast<const LidarLibData*>(
               &_LidarLibData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LidarLibData* other);
  friend void swap(LidarLibData& a, LidarLibData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarLibData* New() const final {
    return CreateMaybeMessage<LidarLibData>(nullptr);
  }

  LidarLibData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarLibData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarLibData& from);
  void MergeFrom(const LidarLibData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarLibData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
  bool has_aabb3ds() const;
  void clear_aabb3ds();
  static const int kAabb3DsFieldNumber = 2;
  const ::lidar_algorithm::common::proto::AABB3Ds& aabb3ds() const;
  ::lidar_algorithm::common::proto::AABB3Ds* release_aabb3ds();
  ::lidar_algorithm::common::proto::AABB3Ds* mutable_aabb3ds();
  void set_allocated_aabb3ds(::lidar_algorithm::common::proto::AABB3Ds* aabb3ds);

  // .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
  bool has_obb3ds() const;
  void clear_obb3ds();
  static const int kObb3DsFieldNumber = 3;
  const ::lidar_algorithm::common::proto::OBB3Ds& obb3ds() const;
  ::lidar_algorithm::common::proto::OBB3Ds* release_obb3ds();
  ::lidar_algorithm::common::proto::OBB3Ds* mutable_obb3ds();
  void set_allocated_obb3ds(::lidar_algorithm::common::proto::OBB3Ds* obb3ds);

  // .lidar_algorithm.common.proto.Clusters clusters = 4;
  bool has_clusters() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 4;
  const ::lidar_algorithm::common::proto::Clusters& clusters() const;
  ::lidar_algorithm::common::proto::Clusters* release_clusters();
  ::lidar_algorithm::common::proto::Clusters* mutable_clusters();
  void set_allocated_clusters(::lidar_algorithm::common::proto::Clusters* clusters);

  // .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
  bool has_point_cloud() const;
  void clear_point_cloud();
  static const int kPointCloudFieldNumber = 5;
  const ::lidar_algorithm::common::proto::PointCloud& point_cloud() const;
  ::lidar_algorithm::common::proto::PointCloud* release_point_cloud();
  ::lidar_algorithm::common::proto::PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::lidar_algorithm::common::proto::PointCloud* point_cloud);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:lidar_algorithm.framework.data.proto.LidarLibData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lidar_algorithm::common::proto::AABB3Ds* aabb3ds_;
  ::lidar_algorithm::common::proto::OBB3Ds* obb3ds_;
  ::lidar_algorithm::common::proto::Clusters* clusters_;
  ::lidar_algorithm::common::proto::PointCloud* point_cloud_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidarlib_5fmodu_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarLibData

// int64 timestamp = 1;
inline void LidarLibData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LidarLibData::timestamp() const {
  // @@protoc_insertion_point(field_get:lidar_algorithm.framework.data.proto.LidarLibData.timestamp)
  return timestamp_;
}
inline void LidarLibData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:lidar_algorithm.framework.data.proto.LidarLibData.timestamp)
}

// .lidar_algorithm.common.proto.AABB3Ds aabb3ds = 2;
inline bool LidarLibData::has_aabb3ds() const {
  return this != internal_default_instance() && aabb3ds_ != nullptr;
}
inline const ::lidar_algorithm::common::proto::AABB3Ds& LidarLibData::aabb3ds() const {
  const ::lidar_algorithm::common::proto::AABB3Ds* p = aabb3ds_;
  // @@protoc_insertion_point(field_get:lidar_algorithm.framework.data.proto.LidarLibData.aabb3ds)
  return p != nullptr ? *p : *reinterpret_cast<const ::lidar_algorithm::common::proto::AABB3Ds*>(
      &::lidar_algorithm::common::proto::_AABB3Ds_default_instance_);
}
inline ::lidar_algorithm::common::proto::AABB3Ds* LidarLibData::release_aabb3ds() {
  // @@protoc_insertion_point(field_release:lidar_algorithm.framework.data.proto.LidarLibData.aabb3ds)
  
  ::lidar_algorithm::common::proto::AABB3Ds* temp = aabb3ds_;
  aabb3ds_ = nullptr;
  return temp;
}
inline ::lidar_algorithm::common::proto::AABB3Ds* LidarLibData::mutable_aabb3ds() {
  
  if (aabb3ds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lidar_algorithm::common::proto::AABB3Ds>(GetArenaNoVirtual());
    aabb3ds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lidar_algorithm.framework.data.proto.LidarLibData.aabb3ds)
  return aabb3ds_;
}
inline void LidarLibData::set_allocated_aabb3ds(::lidar_algorithm::common::proto::AABB3Ds* aabb3ds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(aabb3ds_);
  }
  if (aabb3ds) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aabb3ds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aabb3ds, submessage_arena);
    }
    
  } else {
    
  }
  aabb3ds_ = aabb3ds;
  // @@protoc_insertion_point(field_set_allocated:lidar_algorithm.framework.data.proto.LidarLibData.aabb3ds)
}

// .lidar_algorithm.common.proto.OBB3Ds obb3ds = 3;
inline bool LidarLibData::has_obb3ds() const {
  return this != internal_default_instance() && obb3ds_ != nullptr;
}
inline const ::lidar_algorithm::common::proto::OBB3Ds& LidarLibData::obb3ds() const {
  const ::lidar_algorithm::common::proto::OBB3Ds* p = obb3ds_;
  // @@protoc_insertion_point(field_get:lidar_algorithm.framework.data.proto.LidarLibData.obb3ds)
  return p != nullptr ? *p : *reinterpret_cast<const ::lidar_algorithm::common::proto::OBB3Ds*>(
      &::lidar_algorithm::common::proto::_OBB3Ds_default_instance_);
}
inline ::lidar_algorithm::common::proto::OBB3Ds* LidarLibData::release_obb3ds() {
  // @@protoc_insertion_point(field_release:lidar_algorithm.framework.data.proto.LidarLibData.obb3ds)
  
  ::lidar_algorithm::common::proto::OBB3Ds* temp = obb3ds_;
  obb3ds_ = nullptr;
  return temp;
}
inline ::lidar_algorithm::common::proto::OBB3Ds* LidarLibData::mutable_obb3ds() {
  
  if (obb3ds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lidar_algorithm::common::proto::OBB3Ds>(GetArenaNoVirtual());
    obb3ds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lidar_algorithm.framework.data.proto.LidarLibData.obb3ds)
  return obb3ds_;
}
inline void LidarLibData::set_allocated_obb3ds(::lidar_algorithm::common::proto::OBB3Ds* obb3ds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(obb3ds_);
  }
  if (obb3ds) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obb3ds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obb3ds, submessage_arena);
    }
    
  } else {
    
  }
  obb3ds_ = obb3ds;
  // @@protoc_insertion_point(field_set_allocated:lidar_algorithm.framework.data.proto.LidarLibData.obb3ds)
}

// .lidar_algorithm.common.proto.Clusters clusters = 4;
inline bool LidarLibData::has_clusters() const {
  return this != internal_default_instance() && clusters_ != nullptr;
}
inline const ::lidar_algorithm::common::proto::Clusters& LidarLibData::clusters() const {
  const ::lidar_algorithm::common::proto::Clusters* p = clusters_;
  // @@protoc_insertion_point(field_get:lidar_algorithm.framework.data.proto.LidarLibData.clusters)
  return p != nullptr ? *p : *reinterpret_cast<const ::lidar_algorithm::common::proto::Clusters*>(
      &::lidar_algorithm::common::proto::_Clusters_default_instance_);
}
inline ::lidar_algorithm::common::proto::Clusters* LidarLibData::release_clusters() {
  // @@protoc_insertion_point(field_release:lidar_algorithm.framework.data.proto.LidarLibData.clusters)
  
  ::lidar_algorithm::common::proto::Clusters* temp = clusters_;
  clusters_ = nullptr;
  return temp;
}
inline ::lidar_algorithm::common::proto::Clusters* LidarLibData::mutable_clusters() {
  
  if (clusters_ == nullptr) {
    auto* p = CreateMaybeMessage<::lidar_algorithm::common::proto::Clusters>(GetArenaNoVirtual());
    clusters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lidar_algorithm.framework.data.proto.LidarLibData.clusters)
  return clusters_;
}
inline void LidarLibData::set_allocated_clusters(::lidar_algorithm::common::proto::Clusters* clusters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clusters_);
  }
  if (clusters) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clusters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clusters, submessage_arena);
    }
    
  } else {
    
  }
  clusters_ = clusters;
  // @@protoc_insertion_point(field_set_allocated:lidar_algorithm.framework.data.proto.LidarLibData.clusters)
}

// .lidar_algorithm.common.proto.PointCloud point_cloud = 5;
inline bool LidarLibData::has_point_cloud() const {
  return this != internal_default_instance() && point_cloud_ != nullptr;
}
inline const ::lidar_algorithm::common::proto::PointCloud& LidarLibData::point_cloud() const {
  const ::lidar_algorithm::common::proto::PointCloud* p = point_cloud_;
  // @@protoc_insertion_point(field_get:lidar_algorithm.framework.data.proto.LidarLibData.point_cloud)
  return p != nullptr ? *p : *reinterpret_cast<const ::lidar_algorithm::common::proto::PointCloud*>(
      &::lidar_algorithm::common::proto::_PointCloud_default_instance_);
}
inline ::lidar_algorithm::common::proto::PointCloud* LidarLibData::release_point_cloud() {
  // @@protoc_insertion_point(field_release:lidar_algorithm.framework.data.proto.LidarLibData.point_cloud)
  
  ::lidar_algorithm::common::proto::PointCloud* temp = point_cloud_;
  point_cloud_ = nullptr;
  return temp;
}
inline ::lidar_algorithm::common::proto::PointCloud* LidarLibData::mutable_point_cloud() {
  
  if (point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::lidar_algorithm::common::proto::PointCloud>(GetArenaNoVirtual());
    point_cloud_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lidar_algorithm.framework.data.proto.LidarLibData.point_cloud)
  return point_cloud_;
}
inline void LidarLibData::set_allocated_point_cloud(::lidar_algorithm::common::proto::PointCloud* point_cloud) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(point_cloud_);
  }
  if (point_cloud) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point_cloud = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  point_cloud_ = point_cloud;
  // @@protoc_insertion_point(field_set_allocated:lidar_algorithm.framework.data.proto.LidarLibData.point_cloud)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace data
}  // namespace framework
}  // namespace lidar_algorithm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_lidarlib_5fmodu_5fresult_2eproto
